# general settings
name: Catintell_generate_p2_(h1_h2_high3x_lowLR)
model_type: GenerateModel
num_gpu: 1  # set num_gpu: 0 for cpu mode
# manual_seed: 114514
multitrain: true
round: 1
dataset_random_fetch: true
random_fetch_path: /data/huden/CATINTELL/catintell_image_dataset/catintell_image_pair_all.csv
val_ratio: 0.1
# if dataset_random_fetch is on, the csv_path would be disbaled in the train and val phase.
# a new csv would be created and saved in the models folder


# dataset and data loader settings
datasets:
  train:
    name: Catintell
    type: ImagePairReverseDataset
    image_folder: /data/huden/CATINTELL/catintell_image_dataset
    csv_path: /data/huden/CATINTELL/catintell_image_dataset/catintell_image_pair_all.csv


    
    flip: true
    crop: true
    image_size: !!int 192
    resize: true
    fine_size: 1280
    augment_ratio: 10
    # mean: [0.485, 0.456, 0.406]
    # std: [0.229, 0.224, 0.225]

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 3
    batch_size_per_gpu: 8
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: testCatintell
    type: ImagePairReverseDataset
    image_folder: /data/huden/CATINTELL/catintell_image_dataset
    csv_path: /data/huden/CATINTELL/catintell_image_dataset/catintell_image_pair_all.csv


    flip: false
    crop: false
    image_size: !!int 512
    resize: true
    fine_size: 1280
    augment_ratio: 1
    # mean: [0.485, 0.456, 0.406]
    # std: [0.229, 0.224, 0.225]

# network structures
network_g:
  type: CatintellConv_G
  dim: 32
  stage: 4
  
network_d:
  type: SwinTransformer
  img_size: 192
  patch_size: 4
  in_chans: 3
  num_classes: 1 #
  embed_dim: 64
  depths: [2, 2, 2, 2]
  num_heads: [2, 4, 8, 16]
  window_size: 6 # windows here
  mlp_ratio: 4.
  qkv_bias: True
  drop_rate: 0.
  attn_drop_rate: 0.
  drop_path_rate: 0.1
  ape: False
  patch_norm: True
  use_checkpoint: False
  sigmoid: False


path:
  pretrain_network_g: /data/huden/CATINTELL/pretrained_networks/gen_p1_hloss.pth
  pretrain_network_d: /data/huden/CATINTELL/pretrained_networks/dis_p1_hloss.pth
  strict_load: True
  resume_state: ~

# training settings
train:
  ema_decay: 0.99
  optim_g:
    type: Adam
    lr: !!float 5e-8
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 5e-8
    weight_decay: 0
    betas: [0.9, 0.99]
  
  scheduler:
    type: MultiStepLR
    milestones: [15000, 25000, 35000, 45000]
    gamma: 0.5

  total_iter: 60000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: SmoothL1Loss
    loss_weight: !!float 1e-2
    reduction: mean
  perceptual_opt:
    type: FundusPerceptualLoss
    layer_weights:
      'conv5_4': 1
    vgg_type: vgg19
    use_input_norm: true
    range_norm: false
    perceptual_weight: !!float 5e-2
    style_weight: !!float 0 #5e-2
    criterion: l1
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-6
  cat_opt:
    type: FundusClassLoss
    resize: True
    criterion: 'ce'
    loss_weight: !!float 8e-2


  net_d_iters: 1   # train net_g ever xxxx round
  net_g_init_iters: 1000  # train net_g from xxxx round

# validation settings
val:
  val_freq: !!float 2500
  save_img: true

  metrics:
    
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      input_order: HWC
    ssim:
      type: calculate_ssim
      crop_border: 4
      input_order: HWC




# logging settings
logger:
  print_freq: 2500
  save_checkpoint_freq: !!float 2500
  save_best: true

# dist training settings
# dist_params:
#   backend: nccl
#   port: 29500